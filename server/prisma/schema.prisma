// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  id           Int      @id @default(autoincrement())
  reviews      Review[]
  reportId     Int
  creationDate DateTime
  status       Status
  approvedFlag Boolean
}

model Review {
  id                 Int                @id @default(autoincrement())
  entity             Entity             @relation(fields: [entityId], references: [id], map: "entity_review_entity_id_fkey")
  entityId           Int
  feedbacks          Feedback[]
  accuracyOfFindings AccuracyOfFindings @relation(fields: [accuracyOfFindingsId], references: [id])

  clarityAndCompleteness         ClarityAndCompleteness       @relation(fields: [clarityAndCompletenessId], references: [id])
  impressionAndRecommendations   ImpressionAndRecommendations @relation(fields: [impressionAndRecommendationsId], references: [id])
  technicalQuality               TechnicalQuality             @relation(fields: [technicalQualityId], references: [id])
  overallAssessment              OverallAssessment            @relation(fields: [overallAssessmentId], references: [id])
  feedbackToRadiologist          String?
  complianceAndStandardization   ComplianceAndStandardization @relation(fields: [complianceAndStandardizationId], references: [id])
  additionalReviewerComments     String?
  accuracyOfFindingsId           Int
  clarityAndCompletenessId       Int
  impressionAndRecommendationsId Int
  technicalQualityId             Int
  overallAssessmentId            Int
  complianceAndStandardizationId Int
}

model Feedback {
  id          Int      @id @default(autoincrement())
  review      Review   @relation(fields: [reviewId], references: [id], map: "feedback_review_id_fkey")
  reviewId    Int
  comment     String
  createdDate DateTime
}

model AccuracyOfFindings {
  id                    Int             @id @default(autoincrement())
  correctnessOfFindings Boolean
  commentsOnAccuracy    String?
  missedFindings        MissedFinding[] @relation("AccuracyOfFindingsMissedFinding")
  Review                Review[]
}

model MissedFinding {
  id                   Int                @id @default(autoincrement())
  description          String
  accuracyOfFindings   AccuracyOfFindings @relation("AccuracyOfFindingsMissedFinding", fields: [accuracyOfFindingsId], references: [id])
  accuracyOfFindingsId Int
}

model ClarityAndCompleteness {
  id                     Int      @id @default(autoincrement())
  clarityOfLanguage      Int
  commentsOnLanguage     String?
  completenessOfReport   Int
  commentsOnCompleteness String?
  Review                 Review[]
}

model ImpressionAndRecommendations {
  id                               Int      @id @default(autoincrement())
  accuracyOfImpression             Boolean
  commentsOnImpression             String?
  appropriatenessOfRecommendations Int
  suggestionsForRecommendations    String?
  Review                           Review[]
}

model TechnicalQuality {
  id                     Int      @id @default(autoincrement())
  imagingTechnique       Int
  commentsOnTechnique    String?
  imageQuality           Int
  commentsOnImageQuality String?
  Review                 Review[]
}

model OverallAssessment {
  id              Int      @id @default(autoincrement())
  overallQuality  Int
  generalComments String?
  Review          Review[]
}

model ComplianceAndStandardization {
  id                    Int      @id @default(autoincrement())
  adherenceToGuidelines Boolean
  commentsOnCompliance  String?
  Review                Review[]
}

enum Status {
  Created
  Assigned
  Reviewed
}
