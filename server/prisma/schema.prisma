// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String @id @default(cuid())
  username String @unique
  password String
  role     Role   @default(RADIOLOGIST)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  radiologist   Radiologist? @relation(fields: [radiologistId], references: [id])
  radiologistId String?      @unique
}

enum Role {
  ADMIN
  RADIOLOGIST
}

model Radiologist {
  id              String           @id @default(cuid())
  fname           String
  lname           String
  email           String           @unique
  specializations Specialization[]
  phone           String           @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth Auth?

  ReviewRequestAsCreator  ReviewRequest[] @relation("CreatorRadiologist")
  ReviewRequestAsReviewer ReviewRequest[] @relation("ReviewerRadiologist")
}

model Report {
  id                 String  @id @default(cuid())
  reportUrl          String
  resultUrl          String
  additionalComments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ReviewRequest   ReviewRequest? @relation(fields: [reviewRequestId], references: [id])
  reviewRequestId String?
  Review          Review?        @relation(fields: [reviewId], references: [id])
  reviewId        String? @unique
}

model ReviewRequest {
  id         String      @id @default(cuid())
  status     Status
  approved   Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  creator    Radiologist @relation("CreatorRadiologist", fields: [creatorId], references: [id])
  creatorId  String
  reviewer   Radiologist @relation("ReviewerRadiologist", fields: [reviewerId], references: [id])
  reviewerId String
  report     Report[]
}

model Review {
  id String @id @default(cuid())

  feedbackToRadiologist      String?
  additionalReviewerComments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feedbacks Feedback[]

  accuracyOfFindings             AccuracyOfFindings?           @relation(fields: [accuracyOfFindingsId], references: [id])
  accuracyOfFindingsId           String?                       @unique
  clarityAndCompleteness         ClarityAndCompleteness?       @relation(fields: [clarityAndCompletenessId], references: [id])
  clarityAndCompletenessId       String?                       @unique
  impressionAndRecommendations   ImpressionAndRecommendations? @relation(fields: [impressionAndRecommendationsId], references: [id])
  impressionAndRecommendationsId String?                       @unique
  technicalQuality               TechnicalQuality?             @relation(fields: [technicalQualityId], references: [id])
  technicalQualityId             String?                       @unique
  overallAssessment              OverallAssessment?            @relation(fields: [overallAssessmentId], references: [id])
  overallAssessmentId            String?                       @unique
  complianceAndStandardization   ComplianceAndStandardization? @relation(fields: [complianceAndStandardizationId], references: [id])
  complianceAndStandardizationId String?                       @unique
  Report                         Report?
}

model Feedback {
  id      String @id @default(cuid())
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review   Review @relation(fields: [reviewId], references: [id], map: "feedback_review_id_fkey")
  reviewId String
}

model AccuracyOfFindings {
  id                    String  @id @default(cuid())
  correctnessOfFindings Boolean
  commentsOnAccuracy    String?

  Review        Review?
  MissedFinding MissedFinding[]
}

model MissedFinding {
  id          Int    @id @default(autoincrement())
  description String

  accuracyOfFindingsId String
  AccuracyOfFindings   AccuracyOfFindings @relation(fields: [accuracyOfFindingsId], references: [id])
}

model ClarityAndCompleteness {
  id                     String  @id @default(cuid())
  clarityOfLanguage      Int
  commentsOnLanguage     String?
  completenessOfReport   Int
  commentsOnCompleteness String?

  Review Review?
}

model ImpressionAndRecommendations {
  id                               String  @id @default(cuid())
  accuracyOfImpression             Boolean
  commentsOnImpression             String?
  appropriatenessOfRecommendations Int
  suggestionsForRecommendations    String?

  Review Review?
}

model TechnicalQuality {
  id                     String  @id @default(cuid())
  imagingTechnique       Int
  commentsOnTechnique    String?
  imageQuality           Int
  commentsOnImageQuality String?

  Review Review?
}

model OverallAssessment {
  id              String  @id @default(cuid())
  overallQuality  Int
  generalComments String?

  Review Review?
}

model ComplianceAndStandardization {
  id                    String  @id @default(cuid())
  adherenceToGuidelines Boolean
  commentsOnCompliance  String?

  Review Review?
}

enum Status {
  Created
  Assigned
  Reviewed
}

enum Specialization {
  NEURORADIOLOGY
  MUSCULOSKELETAL_RADIOLOGY
  ABDOMINAL_RADIOLOGY
  CARDIOVASCULAR_RADIOLOGY
  BREAST_IMAGING
  PEDIATRIC_RADIOLOGY
  THORACIC_RADIOLOGY
  GENITOURINARY_RADIOLOGY
  INTERVENTIONAL_RADIOLOGY
  NUCLEAR_MEDICINE
  EMERGENCY_RADIOLOGY
  ONCOLOGIC_IMAGING
  GASTROINTESTINAL_RADIOLOGY
  HEAD_AND_NECK_RADIOLOGY
  ORTHOPEDIC_RADIOLOGY
  VASCULAR_AND_INTERVENTIONAL_RADIOLOGY
  ENDOVASCULAR_SURGICAL_NEURORADIOLOGY
  BODY_IMAGING
}
