// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id       String @id @default(cuid())
  username String @unique
  password String
  role     Role   @default(DOCTOR)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String? @unique
}

enum Role {
  ADMIN
  DOCTOR
}

model Doctor {
  id             String @id @default(cuid())
  fname          String
  lname          String
  email          String @unique
  specialization String
  phone          String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth Auth?
}

model Report {
  id                 Int     @id @default(autoincrement())
  reportUrl          String
  resultUrl          String
  additionalComments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ReviewRequest ReviewRequest[]
}

model ReviewRequest {
  id       Int     @id @default(autoincrement())
  status   Status
  approved Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  report   Report   @relation(fields: [reportId], references: [id])
  reportId Int
  reviews  Review[]
}

model Review {
  id                         Int           @id @default(autoincrement())
  reviewRequest              ReviewRequest @relation(fields: [reviewRequestId], references: [id])
  reviewRequestId            Int
  feedbackToRadiologist      String?
  additionalReviewerComments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feedbacks                      Feedback[]
  accuracyOfFindings             AccuracyOfFindings           @relation(fields: [accuracyOfFindingsId], references: [id])
  accuracyOfFindingsId           Int
  clarityAndCompleteness         ClarityAndCompleteness       @relation(fields: [clarityAndCompletenessId], references: [id])
  clarityAndCompletenessId       Int
  impressionAndRecommendations   ImpressionAndRecommendations @relation(fields: [impressionAndRecommendationsId], references: [id])
  impressionAndRecommendationsId Int
  technicalQuality               TechnicalQuality             @relation(fields: [technicalQualityId], references: [id])
  technicalQualityId             Int
  overallAssessment              OverallAssessment            @relation(fields: [overallAssessmentId], references: [id])
  overallAssessmentId            Int
  complianceAndStandardization   ComplianceAndStandardization @relation(fields: [complianceAndStandardizationId], references: [id])
  complianceAndStandardizationId Int
}

model Feedback {
  id      Int    @id @default(autoincrement())
  comment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review   Review @relation(fields: [reviewId], references: [id], map: "feedback_review_id_fkey")
  reviewId Int
}

model AccuracyOfFindings {
  id                    Int             @id @default(autoincrement())
  correctnessOfFindings Boolean
  commentsOnAccuracy    String?

  missedFindings        MissedFinding[] @relation("AccuracyOfFindingsMissedFinding")
  Review                Review[]
}

model MissedFinding {
  id                   Int                @id @default(autoincrement())
  description          String

  accuracyOfFindings   AccuracyOfFindings @relation("AccuracyOfFindingsMissedFinding", fields: [accuracyOfFindingsId], references: [id])
  accuracyOfFindingsId Int
}

model ClarityAndCompleteness {
  id                     Int      @id @default(autoincrement())
  clarityOfLanguage      Int
  commentsOnLanguage     String?
  completenessOfReport   Int
  commentsOnCompleteness String?

  Review                 Review[]
}

model ImpressionAndRecommendations {
  id                               Int      @id @default(autoincrement())
  accuracyOfImpression             Boolean
  commentsOnImpression             String?
  appropriatenessOfRecommendations Int
  suggestionsForRecommendations    String?

  Review                           Review[]
}

model TechnicalQuality {
  id                     Int      @id @default(autoincrement())
  imagingTechnique       Int
  commentsOnTechnique    String?
  imageQuality           Int
  commentsOnImageQuality String?

  Review                 Review[]
}

model OverallAssessment {
  id              Int      @id @default(autoincrement())
  overallQuality  Int
  generalComments String?

  Review          Review[]
}

model ComplianceAndStandardization {
  id                    Int      @id @default(autoincrement())
  adherenceToGuidelines Boolean
  commentsOnCompliance  String?
  
  Review                Review[]
}

enum Status {
  Created
  Assigned
  Reviewed
}

// enum Specialization {
//   XRAY
//   CT
//   MRI
// }
